
--- Scope ---

B: We might also (much more frequently, in my experience) change definitions of logical predicates, to make them weaker, stronger, or neither, then needing to update proofs accordingly.

Actions:
1. Consider predicate examples

--- Tactics and Workflow ---

B: The story for coming up with readable proof scripts, and for supporting good software-engineering practices in general, seems weak and preliminary.

B: I have more concerns about generation of tactic scripts from proof terms, to paste back into source files.  Fig. 2 already shows excessive provision of explicit arguments in rewrites.  Even within the limited vocabulary of tactics that are considered, we already get scripts that are not pleasant to read.

B: I wonder how hard it would be to formulate an analogous repair procedure directly on tactics.  Something along these lines seems essential to preserve little coding flourishes chosen to aid readability.  Even just preserving comments would be a step forward.

Actions:
1. Continue to improve the tactic decompiler:
  a. Comment & format preservaton
  b. Removing additional arguments to ewrite
  c. Looking directly at old tactic scripts instead of just taking tactics as arguments
  d. Improving performance
  e. Custom tactics that aren't decision procedures
2. Adjust examples with improvements

--- Readability ---

B: More involved refactorings seem to accrete use of additional rules that only hold propositionally.  Do we build up toward rather unwieldy proof terms?  Can you compose and cancel out these casts over time?  (And I'm curious to see what the proof scripts look like.)

B: Do you have evidence about retaining readability of proof scripts (or even proof terms) over multiple rounds of refactoring, especially when eta or iota wind up implemented propositionally and not definitionally?

Actions:
1. Maybe cancel out rewrites in implementation
2. Discuss somewhere
3. Show examples discussed in response




